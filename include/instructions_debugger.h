#ifndef INSTRUCTION_DEBUGGER_H
#define INSTRUCTION_DEBUGGER_H

enum InstructionMnemotechnic {
    INSTRUCTION_MNEMOTECHNIC_LD,
    INSTRUCTION_MNEMOTECHNIC_LDI,
    INSTRUCTION_MNEMOTECHNIC_LDD,

    INSTRUCTION_MNEMOTECHNIC_PUSH,
    INSTRUCTION_MNEMOTECHNIC_POP,

    INSTRUCTION_MNEMOTECHNIC_ADD,
    INSTRUCTION_MNEMOTECHNIC_ADC,
    INSTRUCTION_MNEMOTECHNIC_SUB,
    INSTRUCTION_MNEMOTECHNIC_SBC,
    INSTRUCTION_MNEMOTECHNIC_AND,
    INSTRUCTION_MNEMOTECHNIC_XOR,
    INSTRUCTION_MNEMOTECHNIC_OR,
    INSTRUCTION_MNEMOTECHNIC_CP,
    INSTRUCTION_MNEMOTECHNIC_INC,
    INSTRUCTION_MNEMOTECHNIC_DEC,
    INSTRUCTION_MNEMOTECHNIC_DAA,
    INSTRUCTION_MNEMOTECHNIC_CPL,

    INSTRUCTION_MNEMOTECHNIC_RLCA,
    INSTRUCTION_MNEMOTECHNIC_RLA,
    INSTRUCTION_MNEMOTECHNIC_RRA,
    INSTRUCTION_MNEMOTECHNIC_RLC,
    INSTRUCTION_MNEMOTECHNIC_RL,
    INSTRUCTION_MNEMOTECHNIC_RRC,
    INSTRUCTION_MNEMOTECHNIC_RR,
    INSTRUCTION_MNEMOTECHNIC_SLA,
    INSTRUCTION_MNEMOTECHNIC_SWAP,
    INSTRUCTION_MNEMOTECHNIC_SRA,
    INSTRUCTION_MNEMOTECHNIC_SRL,
    INSTRUCTION_MNEMOTECHNIC_BIT,
    INSTRUCTION_MNEMOTECHNIC_SET,
    INSTRUCTION_MNEMOTECHNIC_RES,
    INSTRUCTION_MNEMOTECHNIC_CCF,
    INSTRUCTION_MNEMOTECHNIC_SCF,
    INSTRUCTION_MNEMOTECHNIC_NOP,
    INSTRUCTION_MNEMOTECHNIC_HALT,
    INSTRUCTION_MNEMOTECHNIC_STOP,
    INSTRUCTION_MNEMOTECHNIC_DI,
    INSTRUCTION_MNEMOTECHNIC_EI,
    INSTRUCTION_MNEMOTECHNIC_JP,
    INSTRUCTION_MNEMOTECHNIC_JR,
    INSTRUCTION_MNEMOTECHNIC_CALL,
    INSTRUCTION_MNEMOTECHNIC_RET,
    INSTRUCTION_MNEMOTECHNIC_RETI,
    INSTRUCTION_MNEMOTECHNIC_RST
};


#endif
